// Generated by CoffeeScript 1.9.0
(function() {
  var $, $model_menu, $table_container, Row, date_re, input_type_map, show_table, type_validators;

  input_type_map = {
    int: '<input type="number" name="{id}" value="{value}" class="vIntegerField">',
    char: '<input type="text" name="{id}" value="{value}" maxlength="255" class="vTextField">',
    date: '<input type="text" name="{id}" value="{value}" size="10" class="vDateField">'
  };

  date_re = /([0-9]{2})\.([0-9]{2})\.([0-9]{4})/;

  type_validators = {
    int: function(v) {
      return parseInt(v) === v;
    },
    char: function(v) {
      return true;
    },
    date: function(v) {
      var a_date, d_date;
      a_date = date_re.exec(v);
      if (!a_date) {
        return false;
      }
      try {
        d_date = new Date(a_date[3], a_date[2] - 1, a_date[1]);
        return d_date.getDate() === a_date[1] && d_date.getMonth() === a_date[2] - 1 && d_date.getFullYear() === a_date[3];
      } catch (_error) {
        return false;
      }
    }
  };

  $ = django.jQuery;

  $table_container = $('.table');

  Row = (function() {
    Row.prototype.delayed_save_timer = null;

    function Row(_at_model, _at_row_data) {
      this.model = _at_model;
      this.row_data = _at_row_data;
      this.fields = $.extend({}, tables_meta_data[this.model].fields);
      this.is_valid = true;
      true;
    }

    Row.prototype.delayed_save = function() {
      var self;
      if (this.delayed_save_timer) {
        clearTimeout(this.delayed_save_timer);
      }
      self = this;
      return this.delayed_save_timer = setTimeout(function() {
        if (self.is_valid) {
          return self.startSaving();
        }
      }, 3000);
    };

    Row.prototype.startSaving = function() {
      var $td_id, self;
      console.log('start saving', this.row_data);
      $td_id = this.$row.find('td:first').html('Saving');
      self = this;
      return setTimeout(function() {
        return $td_id = self.row_data.id;
      }, 2500);
    };

    Row.prototype.onChange = function(inp) {
      var f, is_valid, name, val, _i, _len, _ref;
      name = $(inp).attr('name');
      is_valid = true;
      _ref = this.fields;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        f = _ref[_i];
        if (f.id === name) {
          val = $(inp).val();
          f.is_invalid = !type_validators[f.type](val);
          if (!f.is_invalid) {
            this.row_data[f.id] = val;
          }
        }
        if (f.is_invalid) {
          is_valid = false;
        }
      }
      this.is_valid = is_valid;
      return this.delayed_save();
    };

    Row.prototype.get_table_row = function() {
      var column, header_html, input, self, vname, _i, _len, _ref;
      header_html = ['<td>' + this.row_data.id || '' + '</td>'];
      _ref = tables_meta_data[this.model].fields;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        column = _ref[_i];
        input = input_type_map[column.type];
        column.value = this.row_data[column.id] || '';
        for (vname in column) {
          input = input.replace(RegExp('{' + vname + '}', 'g'), column[vname]);
        }
        header_html.push("<td>" + input + "</td>");
      }
      this.$row = $("<tr class='row-" + this.row_data.id + "'>" + (header_html.join('')) + "</tr>");
      self = this;
      this.$row.find('input').on('change keyup blur', function() {
        return self.onChange(this);
      });
      return this.$row;
    };

    return Row;

  })();

  show_table = function(model) {
    var $table, column, header_html, _i, _len, _ref;
    header_html = ['<th>ID</th>'];
    _ref = tables_meta_data[model].fields;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      column = _ref[_i];
      header_html.push("<th>" + column.title + "</th>");
    }
    $table = $('<table></table>');
    $table.append('<tr>' + header_html.join('') + '</tr>');
    $table.append(new Row(model, {
      id: 'new'
    }).get_table_row());
    $table_container.html($table);
    return DateTimeShortcuts.init();
  };

  $model_menu = $('.models-menu li');

  $model_menu.find('a').on('click touchstart', function() {
    $model_menu.removeClass('active');
    $(this).closest('li').addClass('active');
    show_table($(this).data('model'));
    return false;
  });

}).call(this);

//# sourceMappingURL=main.js.map
