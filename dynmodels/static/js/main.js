// Generated by CoffeeScript 1.9.0
(function() {
  var $, $model_menu, $table_container, Row, api_prefix, csrf_token, date_re, input_type_map, numeric_RE, show_table, type_validators,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  api_prefix = '/api/';

  input_type_map = {
    int: '<input type="number" name="{id}" value="{value}" class="vIntegerField">',
    char: '<input type="text" name="{id}" value="{value}" maxlength="255" class="vTextField">',
    date: '<input type="text" name="{id}" value="{value}" size="10" class="vDateField">'
  };

  date_re = /([0-9]{2})\.([0-9]{2})\.([0-9]{4})/;

  numeric_RE = /^[0-9]+$/;

  type_validators = {
    int: function(v) {
      return numeric_RE.test(v);
    },
    char: function(v) {
      return true;
    },
    date: function(v) {
      var a_date, d_date;
      a_date = date_re.exec(v);
      if (!a_date) {
        return false;
      }
      try {
        d_date = new Date(a_date[3], a_date[2] - 1, a_date[1]);
        return d_date.getDate() === parseInt(a_date[1], 10) && d_date.getMonth() === parseInt(a_date[2], 10) - 1 && d_date.getFullYear() === parseInt(a_date[3]);
      } catch (_error) {
        return false;
      }
    }
  };

  $ = django.jQuery;

  $table_container = $('.table');

  Row = (function() {
    Row.prototype.delayed_save_timer = null;

    function Row(_at_model, _at_row_data, id, _at_$table) {
      var f, _i, _len, _ref;
      this.model = _at_model;
      this.row_data = _at_row_data;
      if (id == null) {
        id = null;
      }
      this.$table = _at_$table;
      this.fields = [];
      _ref = tables_meta_data[this.model].fields;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        f = _ref[_i];
        this.fields.push(f);
      }
      this.row_data.id = id;
      this.last_data = $.extend({}, this.row_data);
      this.is_valid = true;
      this.$table.append(this.get_table_row());
    }

    Row.prototype.delayed_save = function() {
      var self;
      if (this.delayed_save_timer) {
        clearTimeout(this.delayed_save_timer);
      }
      self = this;
      return this.delayed_save_timer = setTimeout(function() {
        if (self.is_valid) {
          return self.startSaving();
        }
      }, 2000);
    };

    Row.prototype.startSaving = function() {
      var $td_id, post_data, self;
      console.log('start saving', this.row_data);
      $td_id = this.$row.find('td:first').html('Saving...');
      self = this;
      post_data = $.extend({
        csrfmiddlewaretoken: csrf_token,
        pk: this.row_data.id
      }, this.row_data);
      return $.post(api_prefix + this.model + '/', post_data, function(result, status) {
        result = JSON.parse(result);
        if (result.success) {
          if (!self.row_data.id) {
            new Row(self.model, {}, null, self.$table);
            self.$table.find('.datetimeshortcuts').remove();
            DateTimeShortcuts.init();
          }
          self.row_data.id = result.row_id;
          return $td_id.html(self.row_data.id);
        } else {
          return $td_id.html('saving error');
        }
      });
    };

    Row.prototype.onChange = function(inp) {
      var $inp, f, has_changes, is_valid, name, val, _i, _len, _ref;
      $inp = $(inp);
      name = $inp.attr('name');
      is_valid = true;
      has_changes = false;
      _ref = this.fields;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        f = _ref[_i];
        if (f.id === name) {
          val = $inp.val();
          f.is_invalid = !type_validators[f.type](val);
          if (f.is_invalid) {
            $inp.addClass('error');
          } else {
            $inp.removeClass('error');
            this.row_data[f.id] = val;
          }
        }
        if (f.is_invalid) {
          is_valid = false;
        }
        if (this.last_data[f.id] !== this.row_data[f.id]) {
          has_changes = true;
        }
      }
      this.is_valid = is_valid;
      if (has_changes) {
        return this.delayed_save();
      }
    };

    Row.prototype.get_table_row = function() {
      var column, header_html, input, row_id, self, vname, _i, _len, _ref;
      row_id = this.row_data.id || 'new';
      header_html = ['<td>' + row_id + '</td>'];
      _ref = tables_meta_data[this.model].fields;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        column = _ref[_i];
        input = input_type_map[column.type];
        column.value = this.row_data[column.id] || '';
        if (column.type === 'date' && __indexOf.call(column.value, '-') >= 0) {
          column.value = column.value.split('-').reverse().join('.');
        }
        for (vname in column) {
          input = input.replace(RegExp('{' + vname + '}', 'g'), column[vname]);
        }
        header_html.push("<td>" + input + "</td>");
      }
      this.$row = $("<tr class='row-" + row_id + "'>" + (header_html.join('')) + "</tr>");
      self = this;
      this.$row.find('input').on('change blur', function() {
        return self.onChange(this);
      });
      return this.$row;
    };

    return Row;

  })();

  show_table = function(model) {
    var $new, $table, column, header_html, _i, _len, _ref;
    header_html = ['<th>ID</th>'];
    _ref = tables_meta_data[model].fields;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      column = _ref[_i];
      header_html.push("<th>" + column.title + "</th>");
    }
    $table = $('<table></table>');
    $table.append('<tr>' + header_html.join('') + '</tr>');
    $new = new Row(model, {}, null, $table);
    $.get(api_prefix + model + '/', function(data, status) {
      var row, row_data, _j, _len1;
      row_data = JSON.parse(data);
      for (_j = 0, _len1 = row_data.length; _j < _len1; _j++) {
        row = row_data[_j];
        new Row(model, row.fields, row.pk, $table);
      }
      $table.append($new.$row);
      $table.find('.datetimeshortcuts').remove();
      return DateTimeShortcuts.init();
    });
    $table_container.html($table);
    return DateTimeShortcuts.init();
  };

  $model_menu = $('.models-menu li');

  $model_menu.find('a').on('click touchstart', function() {
    $model_menu.removeClass('active');
    $(this).closest('li').addClass('active');
    show_table($(this).data('model'));
    return false;
  });

  csrf_token = $('.table input[name=csrfmiddlewaretoken]').val();

}).call(this);

//# sourceMappingURL=main.js.map
